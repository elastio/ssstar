name: CI # Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    needs: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - name: Clippy check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features --workspace -- -D warnings

  test:
    name: Test Suite
    needs: clippy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Cache the minio binary
        id: cache-minio
        uses: actions/cache@v3
        with:
          path: ~/.local/bin
          key: ${{ runner.os }}-minio
      - name: Install minio
        shell: bash
        run: |
          # Download the minio binary if it's not already present
          # Most of the time the minio binary should be in the cache and doesn't need to be downloaded again
          mkdir -p $HOME/.local/bin
          cd $HOME/.local/bin
          if [[ ! -x ./minio ]]
          then
            wget https://dl.min.io/server/minio/release/linux-amd64/minio
            chmod +x minio
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run local tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --workspace

      - name: Run S3 tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --workspace -- --ignored

  docs:
    name: Docs
    needs: clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --document-private-items --all-features --workspace --examples

  coverage:
    name: Code coverage
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Install minio
        shell: bash
        run: |
          mkdir -p $HOME/.local/bin
          cd $HOME/.local/bin
          wget https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: '--all-features --workspace --ignore-tests --out Lcov'
      - name: Upload to Coveralls
        # upload only if push
        if: ${{ github.event_name == 'push' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: './lcov.info'

